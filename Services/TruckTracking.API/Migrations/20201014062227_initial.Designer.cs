// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TruckTracking.API.Models;

namespace TruckTracking.API.Migrations
{
    [DbContext(typeof(TransportContext))]
    [Migration("20201014062227_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TruckTracking.API.Models.Trans_Headers", b =>
                {
                    b.Property<int>("TransID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContactNumber1")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber2")
                        .HasColumnType("text");

                    b.Property<string>("DeviceID")
                        .HasColumnType("text");

                    b.Property<string>("Driver")
                        .HasColumnType("text");

                    b.Property<string>("FromAddress")
                        .HasColumnType("text");

                    b.Property<string>("FromPlant")
                        .HasColumnType("text");

                    b.Property<string>("Helper")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastReportedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastReportedLocation")
                        .HasColumnType("text");

                    b.Property<string>("MaterialGroup")
                        .HasColumnType("text");

                    b.Property<string>("OTP")
                        .HasColumnType("text");

                    b.Property<string>("PartnerID")
                        .HasColumnType("text");

                    b.Property<string>("PoDRefDoc")
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("ToAddress")
                        .HasColumnType("text");

                    b.Property<string>("ToPlant")
                        .HasColumnType("text");

                    b.Property<string>("TransporterID")
                        .HasColumnType("text");

                    b.Property<DateTime>("TripEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TripEndLoc")
                        .HasColumnType("text");

                    b.Property<DateTime>("TripStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TripStartLoc")
                        .HasColumnType("text");

                    b.Property<string>("Truck")
                        .HasColumnType("text");

                    b.Property<string>("TruckType")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("isExceptionOccured")
                        .HasColumnType("text");

                    b.HasKey("TransID");

                    b.HasIndex("DeviceID");

                    b.ToTable("Trans_H");
                });

            modelBuilder.Entity("TruckTracking.API.Models.Trans_Items", b =>
                {
                    b.Property<int>("TransID")
                        .HasColumnType("integer");

                    b.Property<string>("RefDoc")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Item")
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("MaterialGroup")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<string>("uOM")
                        .HasColumnType("text");

                    b.HasKey("TransID", "RefDoc");

                    b.ToTable("Trans_I");
                });

            modelBuilder.Entity("TruckTracking.API.Models.Trans_Location", b =>
                {
                    b.Property<int>("TransID")
                        .HasColumnType("integer");

                    b.Property<int>("SINo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GeoLoc")
                        .HasColumnType("text");

                    b.HasKey("TransID", "SINo");

                    b.ToTable("Trans_Loc");
                });

            modelBuilder.Entity("TruckTracking.API.Models.m_device", b =>
                {
                    b.Property<string>("DeviceID")
                        .HasColumnType("text");

                    b.Property<int>("Battery")
                        .HasColumnType("integer");

                    b.Property<int>("Healthy")
                        .HasColumnType("integer");

                    b.Property<int>("Lifespan")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<DateTime>("PuttoUse")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SoftwareVersion")
                        .HasColumnType("text");

                    b.Property<float>("Vcc")
                        .HasColumnType("real");

                    b.HasKey("DeviceID");

                    b.ToTable("m_device");
                });

            modelBuilder.Entity("TruckTracking.API.Models.Trans_Headers", b =>
                {
                    b.HasOne("TruckTracking.API.Models.m_device", "device")
                        .WithMany()
                        .HasForeignKey("DeviceID");
                });

            modelBuilder.Entity("TruckTracking.API.Models.Trans_Items", b =>
                {
                    b.HasOne("TruckTracking.API.Models.Trans_Headers", "Headers")
                        .WithMany()
                        .HasForeignKey("TransID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckTracking.API.Models.Trans_Location", b =>
                {
                    b.HasOne("TruckTracking.API.Models.Trans_Headers", "Headers")
                        .WithMany()
                        .HasForeignKey("TransID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
